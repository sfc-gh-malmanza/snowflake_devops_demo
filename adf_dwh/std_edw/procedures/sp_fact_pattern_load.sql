-- ============================================================================
-- Stored Procedure: SP_FACT_PATTERN_LOAD
-- Description: Load FACT_PATTERN table from dimension tables
-- Usage: CALL {{ environment }}_ADF_DWH.STD_EDW.SP_FACT_PATTERN_LOAD('2025-01-01', '2025-01-31');
-- Environment: {{ environment }}
-- ============================================================================

CREATE OR REPLACE PROCEDURE {{ environment }}_ADF_DWH.STD_EDW.SP_FACT_PATTERN_LOAD(
    START_DATE DATE,
    END_DATE DATE
)
RETURNS STRING
LANGUAGE SQL
EXECUTE AS CALLER
COPY GRANTS
AS
$$
DECLARE
    v_rows_inserted INT DEFAULT 0;
    v_start_time TIMESTAMP_NTZ;
    v_end_time TIMESTAMP_NTZ;
    v_result_message STRING;
BEGIN
    v_start_time := CURRENT_TIMESTAMP();
    
    -- Create temporary staging table
    CREATE OR REPLACE TEMPORARY TABLE TEMP_PATTERN_STAGING AS
    SELECT
        c.DATE_KEY,
        m.MACHINE_KEY,
        m.PLANT_KEY,
        NULL AS RELEASE_KEY,
        sp.STD_PATTERN_ID AS PATTERN_ID,
        sp.PATTERN_TYPE,
        sp.STD_PATTERN_NAME AS PATTERN_NAME,
        1 AS PATTERN_COUNT,
        sp.STANDARD_CYCLE_TIME + (UNIFORM(0, 10, RANDOM()) - 5) AS CYCLE_TIME,
        FLOOR(UNIFORM(0, 5, RANDOM())) AS DEFECT_COUNT,
        sp.TARGET_QUALITY_SCORE + (UNIFORM(-10, 10, RANDOM())) AS QUALITY_SCORE,
        sp.TARGET_EFFICIENCY + (UNIFORM(-5, 5, RANDOM())) AS EFFICIENCY_RATING,
        FLOOR(UNIFORM(50, 200, RANDOM())) AS THROUGHPUT_UNITS,
        UNIFORM(0, 30, RANDOM()) AS DOWNTIME_MINUTES,
        480 - UNIFORM(0, 30, RANDOM()) AS UPTIME_MINUTES,
        sp.STANDARD_CYCLE_TIME AS TARGET_VALUE,
        sp.STANDARD_CYCLE_TIME + (UNIFORM(0, 10, RANDOM()) - 5) AS ACTUAL_VALUE,
        CASE WHEN HOUR(c.FULL_DATE) BETWEEN 6 AND 14 THEN 'Day'
             WHEN HOUR(c.FULL_DATE) BETWEEN 14 AND 22 THEN 'Evening'
             ELSE 'Night' END AS SHIFT,
        'OP' || LPAD(TO_VARCHAR(FLOOR(UNIFORM(1, 100, RANDOM()))), 4, '0') AS OPERATOR_ID,
        'BATCH' || LPAD(TO_VARCHAR(FLOOR(UNIFORM(1, 1000, RANDOM()))), 6, '0') AS BATCH_ID,
        'ORD' || LPAD(TO_VARCHAR(FLOOR(UNIFORM(1, 5000, RANDOM()))), 8, '0') AS ORDER_ID,
        'Completed' AS STATUS,
        c.FULL_DATE AS PATTERN_START_TIMESTAMP,
        DATEADD(SECOND, sp.STANDARD_CYCLE_TIME, c.FULL_DATE) AS PATTERN_END_TIMESTAMP
    FROM {{ environment }}_ADF_DWH.STD_EDW.DIM_CALENDAR c
    CROSS JOIN {{ environment }}_ADF_DWH.STD_EDW.DIM_MACHINES m
    CROSS JOIN {{ environment }}_ADF_DWH.STD_EDW.STD_PATTERN sp
    WHERE c.FULL_DATE BETWEEN START_DATE AND END_DATE
        AND m.IS_ACTIVE = TRUE
        AND sp.IS_ACTIVE = TRUE
        AND sp.STATUS = 'Active'
        AND ROW_NUMBER() OVER (PARTITION BY c.DATE_KEY, m.MACHINE_KEY ORDER BY RANDOM()) = 1;
    
    -- Calculate derived metrics
    CREATE OR REPLACE TEMPORARY TABLE TEMP_PATTERN_ENRICHED AS
    SELECT
        *,
        ACTUAL_VALUE - TARGET_VALUE AS VARIANCE_VALUE,
        CASE WHEN TARGET_VALUE > 0 
             THEN ROUND(((ACTUAL_VALUE - TARGET_VALUE) / TARGET_VALUE) * 100, 2)
             ELSE 0 END AS VARIANCE_PERCENT,
        CURRENT_TIMESTAMP() AS LOAD_TIMESTAMP
    FROM TEMP_PATTERN_STAGING;
    
    -- Insert into FACT_PATTERN
    INSERT INTO {{ environment }}_ADF_DWH.STD_EDW.FACT_PATTERN (
        DATE_KEY, MACHINE_KEY, PLANT_KEY, RELEASE_KEY,
        PATTERN_ID, PATTERN_TYPE, PATTERN_NAME,
        PATTERN_COUNT, CYCLE_TIME, DEFECT_COUNT,
        QUALITY_SCORE, EFFICIENCY_RATING, THROUGHPUT_UNITS,
        DOWNTIME_MINUTES, UPTIME_MINUTES,
        TARGET_VALUE, ACTUAL_VALUE, VARIANCE_VALUE, VARIANCE_PERCENT,
        SHIFT, OPERATOR_ID, BATCH_ID, ORDER_ID, STATUS,
        PATTERN_START_TIMESTAMP, PATTERN_END_TIMESTAMP,
        CREATED_TIMESTAMP, UPDATED_TIMESTAMP
    )
    SELECT
        DATE_KEY, MACHINE_KEY, PLANT_KEY, RELEASE_KEY,
        PATTERN_ID, PATTERN_TYPE, PATTERN_NAME,
        PATTERN_COUNT, CYCLE_TIME, DEFECT_COUNT,
        QUALITY_SCORE, EFFICIENCY_RATING, THROUGHPUT_UNITS,
        DOWNTIME_MINUTES, UPTIME_MINUTES,
        TARGET_VALUE, ACTUAL_VALUE, VARIANCE_VALUE, VARIANCE_PERCENT,
        SHIFT, OPERATOR_ID, BATCH_ID, ORDER_ID, STATUS,
        PATTERN_START_TIMESTAMP, PATTERN_END_TIMESTAMP,
        LOAD_TIMESTAMP, LOAD_TIMESTAMP
    FROM TEMP_PATTERN_ENRICHED;
    
    v_rows_inserted := SQLROWCOUNT;
    
    DROP TABLE IF EXISTS TEMP_PATTERN_STAGING;
    DROP TABLE IF EXISTS TEMP_PATTERN_ENRICHED;
    
    v_end_time := CURRENT_TIMESTAMP();
    
    v_result_message := 'SP_FACT_PATTERN_LOAD completed successfully. ' ||
                       'Date Range: ' || TO_VARCHAR(START_DATE) || ' to ' || TO_VARCHAR(END_DATE) || '. ' ||
                       'Rows Inserted: ' || TO_VARCHAR(v_rows_inserted) || '. ' ||
                       'Duration: ' || TO_VARCHAR(DATEDIFF(SECOND, v_start_time, v_end_time)) || ' seconds.';
    
    RETURN v_result_message;
    
EXCEPTION
    WHEN OTHER THEN
        DROP TABLE IF EXISTS TEMP_PATTERN_STAGING;
        DROP TABLE IF EXISTS TEMP_PATTERN_ENRICHED;
        v_result_message := 'SP_FACT_PATTERN_LOAD failed: ' || SQLERRM;
        RETURN v_result_message;
END;
$$;

SELECT 'SP_FACT_PATTERN_LOAD deployed to {{ environment }}_ADF_DWH.STD_EDW ({{ environment }})' AS STATUS;
